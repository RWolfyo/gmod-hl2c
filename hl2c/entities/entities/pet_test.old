AddCSLuaFile()


ENT.Base 			= "base_nextbot"
ENT.Spawnable		= false


function ENT:Initialize()


	self:SetModel( "models/classicheadcrab.mdl" );
	self:SetSkin(math.random(0,1))
	self:SetHealth(50)
	
	self.loco:SetDeathDropHeight(500)	//default 200
	self.loco:SetAcceleration(900)		//default 400
	self.loco:SetDeceleration(900)		//default 400
	self.loco:SetStepHeight(18)			//default 18
	self.loco:SetJumpHeight(50)		//default 58
	
	self.Isjumping = false
	
end


function ENT:Splode()
	local Boom = ents.Create("env_explosion")
	Boom:SetPos(self:GetPos())
	Boom:SetKeyValue( "iMagnitude", "90" )
//	Boom:SetOwner(self.Entity:GetOwner())
	Boom:SetOwner(self)	
	Boom:Spawn()
	Boom:Fire("Explode",0,0)
	Boom:Fire("Kill",0,0)
	
	self:Remove()
end


--
-- Name: NEXTBOT:BehaveUpdate
-- Desc: Called to update the bot's behaviour
-- Arg1: number|interval|How long since the last update
-- Ret1:
--
function ENT:BehaveUpdate( fInterval )


	if ( !self.BehaveThread ) then return end
	
	-- If you are not jumping yet and a player is close jump at them
	if (!self.Isjumping) then
		local ent = ents.FindInSphere( self:GetPos(), 120 )
		for k,v in pairs( ent ) do
			if v:IsPlayer() then
				self.loco:FaceTowards( v:GetPos() )
				self.loco:Jump( )
				self.Isjumping = true
			end
		end	
	else	-- If you are in the air and a player is really close explode
		local ent = ents.FindInSphere( self:GetPos(), 50 )
		for k,v in pairs( ent ) do
			if v:IsPlayer() then
				self:Splode()
			end
		end	
	end
		
	local ok, message = coroutine.resume( self.BehaveThread )
	if ( ok == false ) then


		self.BehaveThread = nil
		Msg( self, "error: ", message, "\n" );


	end


end


function ENT:RunBehaviour()


	while ( true ) do


		-- Find the player
		pos = Entity(1):GetPos()
		-- if the position is valid
		if ( pos ) then
			self:StartActivity( ACT_RUN )				-- run anim
			self.loco:SetDesiredSpeed( 360 )			-- run speed	
			local opts = {	lookahead = 300,
							tolerance = 20,
							draw = true,
							maxage = 1,
							repath = 0.1	}
			
			self:MoveToPos( pos, opts )													-- move to position (yielding)


		else


			-- some activity to signify that we didn't find shit
			self:StartActivity( ACT_RUN )							-- walk anims
			self.loco:SetDesiredSpeed( 360 )						-- walk speeds
			self:MoveToPos( self:GetPos() + Vector( math.Rand( -1, 1 ), math.Rand( -1, 1 ), 0 ) * 200 ) -- walk to a random place within about 200 units (yielding)
		end


		coroutine.yield()


	end


end


function ENT:OnLandOnGround()


	self.Isjumping = false
	self:StartActivity( ACT_RUN )
	
end


function ENT:OnKilled( damageinfo )
	
	-- If its killed by something other then it exploding then explode
	if ( damageinfo:GetAttacker() != self ) then
		self:Splode()
	end
	self:BecomeRagdoll( damageinfo )


end


--
-- List the NPC as spawnable
--
list.Set( "NPC", "pet_test", 	{	Name = "Pet Test", 
										Class = "pet_test",
										Category = "Pets"	
									})